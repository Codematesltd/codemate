-- Admin Users Table
create table admin_users (
    id bigint generated by default as identity primary key,
    email text unique not null,
    password_hash text not null,
    created_at timestamptz default now(),
    last_login timestamptz
);

-- Bookings Table (Projects)
create table bookings (
    id bigint generated by default as identity primary key,
    project_id text unique not null,
    name text not null,
    email text not null,
    mobile text not null,
    service_selected text not null,
    additional_services text[] default '{}',
    requirements text not null,
    reference_urls text,
    reference_images text[] default '{}',
    progress float default 0,
    password text not null,
    status text default 'pending',
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

-- Progress Notes Table
create table progress_notes (
    id bigint generated by default as identity primary key,
    project_id text references bookings(project_id),
    note text not null,
    progress_value float not null,
    created_at timestamptz default now(),
    created_by text references admin_users(email)
);

-- Create indexes for better query performance
create index idx_bookings_project_id on bookings(project_id);
create index idx_bookings_email on bookings(email);
create index idx_progress_notes_project_id on progress_notes(project_id);

-- Create a function to update the updated_at timestamp
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = now();
    return new;
end;
$$ language plpgsql;

-- Create a trigger to automatically update the updated_at column
create trigger update_bookings_updated_at
    before update on bookings
    for each row
    execute function update_updated_at_column();

-- RLS (Row Level Security) Policies
-- Enable RLS
alter table admin_users enable row level security;
alter table bookings enable row level security;
alter table progress_notes enable row level security;

-- Admin users can access everything
create policy "Admins have full access" on admin_users
    using (true)
    with check (true);

create policy "Admins have full access" on bookings
    using (true)
    with check (true);

create policy "Admins have full access" on progress_notes
    using (true)
    with check (true);

-- Clients can only view their own bookings
create policy "Clients can view own bookings" on bookings
    for select
    using (email = current_user);

-- Storage Policy for reference-images bucket
-- Run this in the SQL editor after creating the storage bucket:
create policy "Anyone can upload images"
on storage.objects for insert
with check (
    bucket_id = 'reference-images' and
    auth.role() = 'authenticated' and
    (storage.foldername(name))[1] = 'public' and
    octet_length(content) < 5242880 -- 5MB file size limit
);

create policy "Anyone can view images"
on storage.objects for select
using (
    bucket_id = 'reference-images' and
    (storage.foldername(name))[1] = 'public'
);
